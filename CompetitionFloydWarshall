/*I wasn't originally going to use git, but now that assignments are worth so much I've decided to use it.
So as a result I have already pretty much finished everything, and now am just copying onto here.*/

import java.io.File;
import java.util.Scanner;

public class CompetitionFloydWarshall {
	public String filename;
	public int speedA;
	public int speedB;
	public int speedC;
	public double distanceTo [][];
	public int edgeTo [][];
	public int edgeCount;
	
    CompetitionFloydWarshall (String filename, int sA, int sB, int sC){
    	this.speedA = sA;
    	this.speedB = sB;
    	this.speedC = sC;
    	
    	try
    	{
    		File file = new File(filename);
        	Scanner scanner = new Scanner(file);
        	int i = 0;
        	
        	while(scanner.hasNextLine())
        	{
        		String [] line = scanner.nextLine().trim().split("\\s+");
        		if(i == 0)	
        		{
        			distanceTo = new double[Integer.parseInt(line[i])][Integer.parseInt(line[i])];
            		edgeTo = new int[Integer.parseInt(line[i])][Integer.parseInt(line[i])];
            		
            		for(int j = 0; j < distanceTo.length; j++)
            		{
            			for(int k = 0; k < distanceTo[j].length; k++)
            			{
            				distanceTo[j][k] = Integer.MAX_VALUE;
            				if(j == k)
            				{
            					distanceTo[j][k] = 0;
            				}
            			}	
            		}
            	}
        		else if(i == 1)
        		{
        			edgeCount = Integer.parseInt(line[i - 1]);
        		}
        		else
        		{
        			distanceTo[Integer.parseInt(line[0])][Integer.parseInt(line[1])] = Double.parseDouble(line[2]);
        			edgeTo[Integer.parseInt(line[0])][Integer.parseInt(line[1])] = Integer.parseInt(line[0]);
        		}
        		i++;	
        	}
        	
        	scanner.close();
    	}
    	catch(Exception x)
    	{
    		distanceTo = new double[0][0];
    		edgeTo = new int[0][0];
    		return;
    	}
    	
    	//Floyd-Warshall Shortest Path, did'nt separate into function this time
    	for(int i = 0; i <distanceTo.length; i++)
    	{
    		for(int j = 0; j < distanceTo.length; j++)
    		{
    			for(int k = 0; k < distanceTo.length; k++)
    			{
    				if(distanceTo[j][i] + distanceTo[i][k] < distanceTo[j][k])
    				{
    					distanceTo[j][k] = distanceTo[j][i] + distanceTo[i][k];
    					edgeTo[j][k] = i;
    				}
    			}
    		}
    	}
    	
    }

    public int timeRequiredforCompetition(){
    	int minSpeed = Math.min(speedC, Math.min( speedA, speedB));
    	double maxDistance = 0.0;
    	
    	for(int i = 0; i < distanceTo.length; i++)
    	{
    		for(int j = 0; j < distanceTo[i].length; j++)
    		{
    			if(distanceTo[i][j] == Integer.MAX_VALUE)
    			{
    				return - 1;
    			}
    			else if(distanceTo[i][j] > maxDistance)
    			{
    				maxDistance = distanceTo[i][j];
    			}
    		}
    	}
    	int maxTime = (int) Math.ceil((maxDistance*1000)/minSpeed);
    	
    	if(minSpeed <= 0 || maxDistance == 0)
    	{
    		return -1;
    	}
    	return maxTime;
    }
}
